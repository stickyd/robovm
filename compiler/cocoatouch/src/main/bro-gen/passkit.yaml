package: org.robovm.apple.passkit
include: [foundation.yaml, uikit.yaml, addressbook.yaml, contacts.yaml]
library: PassKit
framework: PassKit
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/PassKit.framework/Headers/PassKit.h
typedefs:
    'void (^)(PKPassLibraryAddPassesStatus)': '@Block VoidBlock1<PKPassLibraryAddPassesStatus>'
    'void (^)(PKPaymentAuthorizationStatus)': '@Block VoidBlock1<PKPaymentAuthorizationStatus>'
    'void (^)(BOOL, NSError *)': '@Block VoidBlock2<Boolean, NSError>'
    
enums:
    PKPassKitErrorCode: {first: PKUnknownError, marshaler: ValuedEnum.AsMachineSizedSIntMarshaler}
    PKPassLibraryAddPassesStatus: {first: PKPassLibraryDidAddPasses, marshaler: ValuedEnum.AsMachineSizedSIntMarshaler}
    PKPassType: {}
    PKPaymentAuthorizationStatus: {}
    PKPaymentButtonStyle: {}
    PKPaymentButtonType: {}
    PKPaymentMethodType: {skip_none: true}
    PKPaymentPassActivationState: {}
    PKPaymentSummaryItemType: {}
    PKAddressField: {}
    PKMerchantCapability: {}
    PKShippingType: {}
    PKAddPassButtonStyle: {prefix: PKAddPassButtonStyle}
    PKAddPaymentPassError: {}
    PKAutomaticPassPresentationSuppressionResult: {}
    PKPaymentErrorCode: {nserror: true, prefix: PKPayment} #since 11.0

classes:
    PKPassKitError:
        extends: NSError
        annotations: ['@StronglyLinked']

    PKAddPassButton: # DONE
        methods:
            '-initWithAddPassButtonStyle:':
                name: init
            '+addPassButtonWithStyle:':
                name: addPassButton
    PKAddPassesViewController: # DONE
        methods:
            '-initWithPass:':
                name: init
                parameters:
                    pass:
                        type: PKPass
            '-initWithPasses:':
                name: init
                parameters:
                    passes:
                        type: NSArray<PKPass>
    PKAddPaymentPassRequest: {} # DONE
    PKAddPaymentPassRequestConfiguration: # DONE
        methods:
            '-initWithEncryptionScheme:':
                name: init
    PKAddPaymentPassViewController: # DONE
        methods:
            '-initWithRequestConfiguration:delegate:':
                name: init
    PKContact: {} # DONE
    PKObject: {} # DONE
    PKPass: # DONE
        properties:
            'userInfo': {}
        methods:
            '-initWithData:error:':
                name: init
                throws: NSErrorException
            '-localizedValueForFieldKey:':
                name: getLocalizedValue
    PKPassLibrary: # DONE
        methods:
            '-passes':
                property: true
                return_type: NSArray<PKPass>
            '-passWithPassTypeIdentifier:serialNumber:':
                name: getPass
            '-(removePass|containsPass):':
                trim_after_first_colon: true
            '-replacePassWithPass:':
                name: replacePass
            '-addPasses:withCompletionHandler:':
                name: addPasses
                parameters:
                    passes:
                        type: NSArray<PKPass>
            '-passesOfType:':
                name: getPassesOfType
                return_type: NSArray<PKPass>
            '-remotePaymentPasses':
                property: true
                return_type: NSArray<PKPass>
            '-activatePaymentPass.*':
                trim_after_first_colon: true
            '-canAddPaymentPassWithPrimaryAccountIdentifier:':
                name: canAddPaymentPass
            '+requestAutomaticPassPresentationSuppressionWithResponseHandler:':
                name: requestAutomaticPassPresentationSuppression
                parameters:
                    responseHandler:
                        type: '@Block VoidBlock1<PKAutomaticPassPresentationSuppressionResult>'
            '+endAutomaticPassPresentationSuppressionWithRequestToken:':
                name: endAutomaticPassPresentationSuppression
            '+isPaymentPassActivationAvailable':
                name: isDevicePaymentPassActivationAvailable
    PKPayment: # DONE
        properties:
            'billingAddress':
                type: ABPerson
                annotations: ['@WeaklyLinked']
            'shippingAddress':
                type: ABPerson
                annotations: ['@WeaklyLinked']
    PKPaymentAuthorizationViewController: # DONE
        methods:
            '-initWithPaymentRequest:':
                name: init
            '+canMakePaymentsUsingNetworks.*':
                trim_after_first_colon: true
                parameters:
                    supportedNetworks:
                        type: List<PKPaymentNetwork>
                        marshaler: PKPaymentNetwork.AsListMarshaler
    PKPaymentButton: # DONE
        methods:
            '-initWithPaymentButtonType:paymentButtonStyle:':
                name: init
            '+buttonWithType:style:':
                exclude: true
    PKPaymentMethod: {} # DONE
    PKPaymentPass: {} # DONE
    PKPaymentRequest: # DONE
        properties:
            'supportedNetworks':
                type: List<PKPaymentNetwork>
                marshaler: PKPaymentNetwork.AsListMarshaler
            'paymentSummaryItems':
                type: NSArray<PKPaymentSummaryItem>
            'shippingMethods':
                type: NSArray<PKShippingMethod>
        methods:
            '+paymentContactInvalidErrorWithContactField:localizedDescription:':
                name: createPaymentContactInvalidError
            '+paymentShippingAddressInvalidErrorWithKey:localizedDescription:':
                name: createPaymentShippingAddressInvalidError
            '+paymentBillingAddressInvalidErrorWithKey:localizedDescription:':
                name: createPaymentBillingAddressInvalidError
    PKPaymentSummaryItem: # DONE
        methods:
            '+summaryItemWithLabel:amount:':
                name: create
                constructor: true
            '+summaryItemWithLabel:amount:type:':
                name: create
                constructor: true
    PKPaymentToken: # DONE
        properties:
            'paymentNetwork':
                type: PKPaymentNetwork
    PKShippingMethod: {} # DONE

    PKLabeledValue:
        methods:
            '-init.*':
                name: init
    PKPaymentAuthorizationController:
        methods:
            '+canMakePaymentsUsingNetworks:capabilities:':
                name: canMakePayments
    PKSuicaPassProperties: {}
    PKPaymentAuthorizationResult: #since 11.0
        methods:
            '-init.*':
                name: init
    PKPaymentRequestPaymentMethodUpdate: {} #since 11.0
    PKPaymentRequestShippingContactUpdate: #since 11.0
        methods:
            '-init.*':
                name: init
    PKPaymentRequestShippingMethodUpdate: {} #since 11.0
    PKPaymentRequestUpdate: {} #since 11.0
    PKTransitPassProperties: {} #since 11.3

protocols:
    PKPaymentAuthorizationControllerDelegate:
        methods:
            '-paymentAuthorizationController:didAuthorizePayment:completion:':
                name: didAuthorizePaymentEx # as outdated
            '-paymentAuthorizationControllerDidFinish:':
                name: didFinish
            '-paymentAuthorizationControllerWillAuthorizePayment:':
                name: willAuthorizePayment
            '-paymentAuthorizationController:didSelectShippingMethod:completion:':
                name: didSelectShippingMethod
            '-paymentAuthorizationController:didSelectShippingContact:completion:':
                name: didSelectShippingContact
            '-paymentAuthorizationController:didSelectPaymentMethod:completion:':
                name: didSelectPaymentMethodEx # as outdated
            '-paymentAuthorizationController:didAuthorizePayment:handler:':
                name: didAuthorizePayment
            '-paymentAuthorizationController:didSelectShippingMethod:handler:':
                name: didSelectShippingMethod
            '-paymentAuthorizationController:didSelectShippingContact:handler:':
                name: didSelectShippingContact
            '-paymentAuthorizationController:didSelectPaymentMethod:handler:':
                name: didSelectPaymentMethod

    PKAddPassesViewControllerDelegate: # DONE
        methods:
            '-addPassesViewControllerDidFinish:':
                name: didFinish
    PKAddPaymentPassViewControllerDelegate: # DONE
        methods:
            '-addPaymentPassViewController:generateRequestWithCertificateChain:nonce:nonceSignature:completionHandler:':
                name: generateRequest
                parameters:
                    certificates:
                        type: NSArray<NSData>
                    handler:
                        type: '@Block VoidBlock1<PKAddPaymentPassRequest>'
            '-addPaymentPassViewController:didFinishAddingPaymentPass:error:':
                name: didFinishAddingPaymentPass
    PKPaymentAuthorizationViewControllerDelegate: # DONE
        methods:
            '-paymentAuthorizationViewController:didAuthorizePayment:completion:':
                name: didAuthorizePaymentEx # as outdated
            '-paymentAuthorizationViewControllerDidFinish:':
                name: didFinish
            '-paymentAuthorizationViewControllerWillAuthorizePayment:':
                name: willAuthorizePayment
            '-paymentAuthorizationViewController:didSelectShippingMethod:completion:':
                name: didSelectShippingMethod
                parameters:
                    completion:
                        type: '@Block VoidBlock2<PKPaymentAuthorizationStatus, NSArray<PKPaymentSummaryItem>>'
            '-paymentAuthorizationViewController:didSelectShippingAddress:completion:':
                name: didSelectShippingAddress
                parameters:
                    completion:
                        type: '@Block VoidBlock3<PKPaymentAuthorizationStatus, NSArray<PKShippingMethod>, NSArray<PKPaymentSummaryItem>>'
            '-paymentAuthorizationViewController:didSelectShippingContact:completion:':
                name: didSelectShippingContact
                parameters:
                    completion:
                        type: '@Block VoidBlock3<PKPaymentAuthorizationStatus, NSArray<PKShippingMethod>, NSArray<PKPaymentSummaryItem>>'
            '-paymentAuthorizationViewController:didSelectPaymentMethod:completion:':
                name: didSelectPaymentMethodEx # as outdated
                parameters:
                    completion:
                        type: '@Block VoidBlock1<NSArray<PKPaymentSummaryItem>>'
            '-paymentAuthorizationViewController:didAuthorizePayment:handler:':
                name: didAuthorizePayment
            '-paymentAuthorizationViewController:didSelectShippingMethod:handler:':
                name: didSelectShippingMethod
            '-paymentAuthorizationViewController:didSelectShippingContact:handler:':
                name: didSelectShippingContact
            '-paymentAuthorizationViewController:didSelectPaymentMethod:handler:':
                name: didSelectPaymentMethod

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (PK.*):
        class: PassKit
        name: 'Function__#{g[0]}'

values:
    PKPassKitErrorDomain:
        class: PKPassKitError
        name: getClassDomain

    PKPaymentErrorDomain:
        class: PKPaymentErrorCode
        name: getClassDomain

    PKPaymentError(.*)UserInfoKey:
        class: PKPaymentErrorCode
        name: '#{g[0]}UserInfoKey'

    # PKPassLibrary
    PKPassLibrary(.*Notification):
        class: PKPassLibrary
        name: '#{g[0]}'
        type: NSString
    PKPassLibrary(PassTypeIdentifier|SerialNumber)UserInfoKey:
        dictionary: PKRemovedPassInfo
        name: '#{g[0]}'
        type: NSString
        mutable: false
        marshalers: false
        methods:
            PassTypeIdentifier:
                type: String
            SerialNumber:
                type: String
    PKPassLibrary(.*)UserInfoKey:
        dictionary: PKPassLibraryNotification
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            AddedPasses:
                type: NSArray<PKPass>
            ReplacementPasses:
                type: NSArray<PKPass>

    # PKPayment
    PKPaymentNetwork(.*):
        enum: PKPaymentNetwork
        name: '#{g[0]}'
        type: NSString

    # PKContactField
    PKContactField(.*):
        enum: PKContactField
        name: '#{g[0]}'
        type: NSString

    # PKEncryptionScheme
    PKEncryptionScheme(.*):
        enum: PKEncryptionScheme
        name: '#{g[0]}'
        type: NSString

    # Make sure we don't miss any values if new ones are introduced in a later version
    (PK.*):
        class: PassKit
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (PK.*):
        class: PassKit
        name: 'Constant__#{g[0]}'

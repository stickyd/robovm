package: org.robovm.apple.metal
include: [foundation.yaml, dispatch.yaml]
library: Metal
framework: Metal
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/Metal.framework/Headers/Metal.h
private_typedefs:
    MTLNewLibraryCompletionHandler: '@Block VoidBlock2<MTLLibrary, NSError>'
    MTLNewRenderPipelineStateCompletionHandler: '@Block VoidBlock2<MTLRenderPipelineState, NSError>'
    MTLNewRenderPipelineStateWithReflectionCompletionHandler: '@Block VoidBlock3<MTLRenderPipelineState, MTLRenderPipelineReflection, NSError>'
    MTLNewComputePipelineStateCompletionHandler: '@Block VoidBlock2<MTLComputePipelineState, NSError>'
    MTLNewComputePipelineStateWithReflectionCompletionHandler: '@Block VoidBlock3<MTLComputePipelineState, MTLComputePipelineReflection, NSError>'    
    'void (^)(void *, NSUInteger)': '@Block("(@Pointer,@MachineSizedUInt)") VoidBlock2<Long, Long>'
    'MTLAutoreleasedRenderPipelineReflection *': MTLRenderPipelineReflection.MTLRenderPipelineReflectionPtr
    'MTLAutoreleasedComputePipelineReflection *': MTLComputePipelineReflection.MTLComputePipelineReflectionPtr
    '__IOSurface *': org.robovm.apple.iosurface.IOSurface

enums:
    MTLBlitOption: {}
    MTLPixelFormat: {}
    MTLPurgeableState: {}
    MTLCPUCacheMode: {}
    MTLDepthClipMode: {prefix: MTLDepthClipMode}
    MTLResourceOptions: {skip_none: true, ignore: '(MTLResourceOptionCPUCacheModeDefault|MTLResourceOptionCPUCacheModeWriteCombined)'}
    MTLFunctionType: {}
    MTLLanguageVersion: {prefix: MTLLanguage}
    MTLLibraryErrorCode: {first: MTLLibraryErrorUnsupported}
    MTLRenderPipelineErrorCode: {first: MTLRenderPipelineErrorInternal}
    MTLFeatureSet: {}
    MTLPipelineOption: {}
    MTLTextureType: {}
    MTLCommandBufferStatus: {}
    MTLCommandBufferErrorCode: {first: MTLCommandBufferErrorNone}
    MTLCompareFunction: {}
    MTLStencilOperation: {}
    MTLLoadAction: {}
    MTLStoreAction: {}
    MTLDataType: {}
    MTLArgumentType: {}
    MTLArgumentAccess: {}
    MTLBlendFactor: {}
    MTLBlendOperation: {}
    MTLColorWriteMask: {}
    MTLVertexFormat: {}
    MTLVertexStepFunction: {}
    MTLPrimitiveType: {}
    MTLIndexType: {}
    MTLVisibilityResultMode: {}
    MTLCullMode: {}
    MTLWinding: {prefix: MTLWinding}
    MTLTriangleFillMode: {}
    MTLSamplerMinMagFilter: {}
    MTLSamplerMipFilter: {}
    MTLSamplerAddressMode: {}
    MTLMultisampleDepthResolveFilter: {}
    MTLStorageMode: {}
    MTLTextureUsage: {}

    MTLPatchType: {}
    MTLAttributeFormat: {}
    MTLStepFunction: {}
    MTLRenderStages: {}
    MTLTessellationPartitionMode: {}
    MTLTessellationFactorStepFunction: {}
    MTLTessellationFactorFormat: {}
    MTLTessellationControlPointIndexType: {}
    MTLSamplerBorderColor: {}
    MTLResourceUsage: {} #since 11.0
    MTLReadWriteTextureTier: {} #since 11.0
    MTLArgumentBuffersTier: {} #since 11.0
    MTLStoreActionOptions: {prefix: MTLStoreActionOption} #since 11.0
    MTLMutability: {} #since 11.0

classes:
    MTLAttribute: {}
    MTLFunctionConstant: {}
    MTLBufferLayoutDescriptor: {}
    MTLBufferLayoutDescriptorArray:
        methods:
            '-objectAtIndexedSubscript:':
                name: get
            '-setObject:atIndexedSubscript:':
                name: set
    MTLAttributeDescriptor: {}
    MTLAttributeDescriptorArray:
        methods:
            '-objectAtIndexedSubscript:':
                name: get
            '-setObject:atIndexedSubscript:':
                name: set
    MTLStageInputOutputDescriptor: {}
    MTLHeapDescriptor: {}
    MTLSizeAndAlign: {} # struct
    MTLFunctionConstantValues:
        methods:
            '-setConstantValue:type:atIndex:':
                trim_after_first_colon: true
            '-setConstantValues:type:withRange':
                trim_after_first_colon: true
            '-setConstantValue:type:withName:':
                trim_after_first_colon: true
            '-setConstantValues:type:withRange:':
                trim_after_first_colon: true

    MTLCommandBufferError:
        extends: NSError
        annotations: ['@StronglyLinked']
    MTLLibraryError:
        extends: NSError
        annotations: ['@StronglyLinked']
    MTLRenderPipelineError:
        extends: NSError
        annotations: ['@StronglyLinked']

    # Structs
    MTLSamplePosition: {}
    MTLClearColor: {} # DONE
    MTLDispatchThreadgroupsIndirectArguments: {} # DONE
    MTLDrawIndexedPrimitivesIndirectArguments: {} # DONE
    MTLDrawPrimitivesIndirectArguments: {} # DONE
    MTLOrigin: {} # DONE
    MTLRegion: {} # DONE
    MTLScissorRect: {} # DONE
    MTLSize: {} # DONE
    MTLViewport: {} # DONE

    MTLArgument: {} # DONE
    MTLArrayType: # DONE
        methods:
            '-elementStructType':
                property: true
            '-elementArrayType':
                property: true
    MTLCompileOptions: # DONE
        properties:
            'preprocessorMacros':
                type: 'Map<String, String>'
                marshaler: NSDictionary.AsStringStringMapMarshaler
    MTLComputePipelineDescriptor: # DONE
        properties:
            'threadGroupSizeIsMultipleOfThreadExecutionWidth':
                name: threadGroupSizeMultipleOfThreadExecutionWidth
    MTLComputePipelineReflection: # DONE
        properties:
            'arguments':
                type: NSArray<MTLArgument>
    MTLDepthStencilDescriptor: {} # DONE
    MTLRenderPassAttachmentDescriptor: {} # DONE
    MTLRenderPassColorAttachmentDescriptor: {} # DONE
    MTLRenderPassDepthAttachmentDescriptor: {} # DONE
    MTLRenderPassStencilAttachmentDescriptor: {} # DONE
    MTLRenderPassColorAttachmentDescriptorArray: # DONE
        methods:
            '-objectAtIndexedSubscript:':
                name: get
            '-setObject:atIndexedSubscript:':
                name: set
    MTLRenderPassDescriptor: # DONE
        methods:
            '+renderPassDescriptor':
                exclude: true
            '-setSamplePositions:count:':
                trim_after_first_colon: true
            '-getSamplePositions:count:':
                trim_after_first_colon: true
    MTLRenderPipelineColorAttachmentDescriptor: {} # DONE
    MTLRenderPipelineColorAttachmentDescriptorArray: # DONE
        methods:
            '-objectAtIndexedSubscript:':
                name: get
            '-setObject:atIndexedSubscript:':
                name: set
    MTLRenderPipelineDescriptor: {} # DONE
    MTLRenderPipelineReflection: # DONE
        properties:
            'vertexArguments':
                type: NSArray<MTLArgument>
            'fragmentArguments':
                type: NSArray<MTLArgument>
    MTLSamplerDescriptor: # DONE
        properties:
            'normalizedCoordinates':
                name: normalizesCoordinates
    MTLStencilDescriptor: {} # DONE
    MTLStructMember: # DONE
        methods:
            '-structType':
                property: true
            '-arrayType':
                property: true
    MTLStructType: # DONE
        properties:
            'members':
                type: NSArray<MTLStructMember>
        methods:
            '-memberByName:':
                name: getMemberByName
    MTLTextureDescriptor: # DONE
        methods:
            '+texture2DDescriptorWithPixelFormat:width:height:mipmapped:':
                name: create2DDescriptor
            '+textureCubeDescriptorWithPixelFormat:size:mipmapped:':
                name: createCubeDescriptor
    MTLVertexAttribute: {} # DONE
    MTLVertexAttributeDescriptor: {} # DONE
    MTLVertexAttributeDescriptorArray: # DONE
        methods:
            '-objectAtIndexedSubscript:':
                name: get
            '-setObject:atIndexedSubscript:':
                name: set
    MTLVertexBufferLayoutDescriptor: {} # DONE
    MTLVertexBufferLayoutDescriptorArray: # DONE
        methods:
            '-objectAtIndexedSubscript:':
                name: get
            '-setObject:atIndexedSubscript:':
                name: set
    MTLVertexDescriptor: # DONE
        methods:
            '+vertexDescriptor':
                exclude: true
    MTLArgumentDescriptor: {} #since 11.0
    MTLCaptureManager: {} #since 11.0
    MTLPipelineBufferDescriptor: {} #since 11.0
    MTLPipelineBufferDescriptorArray: #since 11.0
        methods:
            '-setObject:atIndexedSubscript:':
                trim_after_first_colon: true
    MTLPointerType: {} #since 11.0
    MTLTextureReferenceType: {} #since 11.0
    MTLTileRenderPipelineColorAttachmentDescriptor: {} #since 11.0
    MTLTileRenderPipelineColorAttachmentDescriptorArray: #since 11.0
        methods:
            '-setObject:atIndexedSubscript:':
                trim_after_first_colon: true
    MTLTileRenderPipelineDescriptor: {} #since 11.0
    MTLType: {} #since 11.0

protocols:
    MTLHeap:
        methods:
            '-newBufferWithLength:options:':
                  name: newBuffer
            '-newTextureWithDescriptor:':
                  name: newTexture
    MTLFence: {}


    MTLBlitCommandEncoder: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-copyFromTexture.*toTexture.*':
                name: copyFromTextureToTexture
            '-copyFromBuffer.*toTexture.*':
                name: copyFromBufferToTexture
            '-copyFromTexture.*toBuffer.*':
                name: copyFromTextureToBuffer
            '-generateMipmapsForTexture:':
                trim_after_first_colon: true
            '-fillBuffer:range:value:':
                trim_after_first_colon: true
            '-copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:':
                name: copyFromBufferToBuffer
    MTLBuffer: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-contents':
                name: getContents0
                return_type: '@Pointer long'
                visibility: protected
            '-newTextureWithDescriptor:offset:bytesPerRow:':
                name: newTexture
                return_marshaler: NSObject.NoRetainMarshaler
            '-addDebugMarker:range:':
                trim_after_first_colon: true
    MTLCommandBuffer: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        properties:
            'retainedReferences':
                name: maintainsRetainedReferences
                omit_prefix: true
        methods:
            '-addScheduledHandler:':    
                trim_after_first_colon: true
                parameters:
                    block:
                        type: '@Block VoidBlock1<MTLCommandBuffer>'
            '-presentDrawable:':    
                trim_after_first_colon: true
            '-presentDrawable:atTime:':    
                name: presentDrawableAtTime
            '-presentDrawable:afterMinimumDuration:':
                name: presentDrawableAfterMinimumDuration
            '-addCompletedHandler:':
                trim_after_first_colon: true
                parameters:
                    block:
                        type: '@Block VoidBlock1<MTLCommandBuffer>'
            '-blitCommandEncoder':    
                name: newBlitCommandEncoder
            '-renderCommandEncoderWithDescriptor:':    
                name: newRenderCommandEncoder
            '-computeCommandEncoder':
                name: newComputeCommandEncoder
            '-parallelRenderCommandEncoderWithDescriptor:':
                name: newParallelRenderCommandEncoder
    MTLCommandEncoder: # DONE
        methods:
            '-insertDebugSignpost:':
                trim_after_first_colon: true
            '-pushDebugGroup:':
                trim_after_first_colon: true
    MTLCommandQueue: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-commandBuffer':
                property: true
            '-commandBufferWithUnretainedReferences':
                property: true
    MTLComputeCommandEncoder: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-setBytes:length:atIndex:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-setBufferOffset:atIndex:':
                trim_after_first_colon: true
            '-setBuffer:offset:atIndex:':
                trim_after_first_colon: true
            '-setBuffers:offsets:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffers:
                        type: MTLBuffer.MTLBufferPtr
            '-setTexture:atIndex:':
                trim_after_first_colon: true
            '-setTextures:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    textures:
                        type: MTLTexture.MTLTexturePtr
            '-setSamplerState:atIndex:':
                trim_after_first_colon: true
            '-setSamplerStates:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    samplers:
                        type: MTLSamplerState.MTLSamplerStatePtr
            '-setSamplerState:lodMinClamp:lodMaxClamp:atIndex:':
                trim_after_first_colon: true
            '-setSamplerStates:lodMinClamps:lodMaxClamps:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    samplers:
                        type: MTLSamplerState.MTLSamplerStatePtr
            '-setThreadgroupMemoryLength:atIndex:':
                trim_after_first_colon: true
            '-dispatchThreadgroups:threadsPerThreadgroup:':
                trim_after_first_colon: true
            '-dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:':
                name: dispatchThreadgroups
            '-setImageblockWidth:height:':
                name: dispatchThreadgroups
            '-dispatchThreads:threadsPerThreadgroup:':
                name: dispatchThread
            '-useResource:usage:':
                trim_after_first_colon: true
            '-useResources:count:usage:':
                trim_after_first_colon: true
            '-useHeaps:count:':
                trim_after_first_colon: true
    MTLComputePipelineState: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
    MTLDepthStencilState: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
    MTLDevice: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-newCommandQueueWithMaxCommandBufferCount:':
                name: newCommandQueue
            '-newBufferWithLength:options:':
                name: newBuffer
            '-newBufferWithBytes:length:options:':
                name: newBuffer
                visibility: protected
                parameters:
                    pointer:
                        type: '@Pointer long'
            '-newBufferWithBytesNoCopy:length:options:deallocator:':
                name: newBuffer
                visibility: protected
                parameters:
                    pointer:
                        type: '@Pointer long'
            '-newDepthStencilStateWithDescriptor:':
                name: newDepthStencilState
            '-newTextureWithDescriptor:':
                name: newTexture
            '-newSamplerStateWithDescriptor:':
                name: newSamplerState
            '-newLibraryWithFile:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-newLibraryWithData:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                annotations: ['@WeaklyLinked']
                parameters:
                    data:
                        type: DispatchData
            '-newLibraryWithSource:options:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-newLibraryWithSource:options:completionHandler:':
                trim_after_first_colon: true
            '-newRenderPipelineState.*error:':
                name: newRenderPipelineState
                throws: NSErrorException
            '-newRenderPipelineState.*':
                name: newRenderPipelineState
            '-newComputePipelineState.*error:':
                name: newComputePipelineState
                throws: NSErrorException
            '-newComputePipelineState.*':
                name: newComputePipelineState
            '-supportsFeatureSet:':
                trim_after_first_colon: true
            '-supportsTextureSampleCount:':
                trim_after_first_colon: true
            '-heapBufferSizeAndAlignWithLength:options:':
                trim_after_first_colon: true
            '-newDefaultLibraryWithBundle:error:':
                name: newDefaultLibrary
                throws: NSErrorException
            '-newTextureWithDescriptor:iosurface:plane:':
                name: newTexture
            '-newLibraryWithURL:error:':
                throws: NSErrorException
                name: newLibrary
            '-getDefaultSamplePositions:count:':
                trim_after_first_colon: true
    MTLDrawable: # DONE
        methods:
            '-presentAtTime:':
                trim_after_first_colon: true
    MTLFunction: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        properties:
            'vertexAttributes':
                type: NSArray<MTLVertexAttribute>
        methods:
            '-newArgumentEncoderWithBufferIndex:reflection:':
                name: newArgumentEncoder
    MTLLibrary: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        properties:
            'functionNames':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '-newFunctionWithName:':
                name: newFunction
                return_marshaler: NSObject.NoRetainMarshaler
            '-newFunctionWithName:constantValues:error:':
                name: newFunction
                throws: NSErrorException
            '-newFunctionWithName:constantValues:completionHandler:':
                name: newFunction
    MTLParallelRenderCommandEncoder: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-renderCommandEncoder':
                name: newRenderCommandEncoder
            '-setColorStoreAction:atIndex:':
                name: setColorStoreAction
            '-setColorStoreActionOptions:atIndex:':
                trim_after_first_colon: true
    MTLRenderCommandEncoder: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-setVertexBytes:length:atIndex:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-setVertexBufferOffset:atIndex:':
                trim_after_first_colon: true
            '-setVertexBuffer:offset:atIndex:':
                trim_after_first_colon: true
            '-setVertexBuffers:offsets:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffers:
                        type: MTLBuffer.MTLBufferPtr
            '-setVertexTexture:atIndex:':
                trim_after_first_colon: true
            '-setVertexTextures:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    textures:
                        type: MTLTexture.MTLTexturePtr
            '-setVertexSamplerState:atIndex:':
                trim_after_first_colon: true
            '-setVertexSamplerStates:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    samplers:
                        type: MTLSamplerState.MTLSamplerStatePtr
            '-setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:':
                trim_after_first_colon: true
            '-setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    samplers:
                        type: MTLSamplerState.MTLSamplerStatePtr
            '-setDepthBias:slopeScale:clamp:':
                trim_after_first_colon: true
            '-setFragmentBytes:length:atIndex:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-setFragmentBuffer:offset:atIndex:':
                trim_after_first_colon: true
            '-setFragmentBufferOffset:atIndex:':
                trim_after_first_colon: true
            '-setFragmentBuffers:offsets:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffers:
                        type: MTLBuffer.MTLBufferPtr
            '-setFragmentTexture:atIndex:':
                trim_after_first_colon: true
            '-setFragmentTextures:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    textures:
                        type: MTLTexture.MTLTexturePtr
            '-setFragmentSamplerState:atIndex:':
                trim_after_first_colon: true
            '-setFragmentSamplerStates:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    samplers:
                        type: MTLSamplerState.MTLSamplerStatePtr
            '-setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:':
                trim_after_first_colon: true
            '-setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    samplers:
                        type: MTLSamplerState.MTLSamplerStatePtr
            '-setBlendColorRed:green:blue:alpha:':
                name: setBlendColor
            '-setStencilFrontReferenceValue:backReferenceValue:':
                name: setStencilReferenceValue
            '-setVisibilityResultMode:offset:':
                trim_after_first_colon: true
            '-drawPrimitives:vertexStart:vertexCount:instanceCount:':
                trim_after_first_colon: true
            '-drawPrimitives:vertexStart:vertexCount:':
                trim_after_first_colon: true
            '-drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:':
                trim_after_first_colon: true
            '-drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:':
                trim_after_first_colon: true
            '-setColorStoreAction:atIndex:':
                name: setColorStoreAction
            '-drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:':
                trim_after_first_colon: true
            '-drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:':
                trim_after_first_colon: true
            '-drawPrimitives:indirectBuffer:indirectBufferOffset:':
                trim_after_first_colon: true
            '-drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:':
                trim_after_first_colon: true
            '-setTessellationFactorBuffer:offset:instanceStride:':
                trim_after_first_colon: true
            '-drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:':
                trim_after_first_colon: true
            '-drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:':
                trim_after_first_colon: true
            '-updateFence:afterStages:':
                trim_after_first_colon: true
            '-waitForFence:beforeStages:':
                trim_after_first_colon: true
            '-setColorStoreActionOptions:atIndex:':
                trim_after_first_colon: true
            '-setTileBytes:length:atIndex:':
                trim_after_first_colon: true
            '-setTileBuffer:offset:atIndex:':
                trim_after_first_colon: true
            '-setTileBufferOffset:atIndex:':
                trim_after_first_colon: true
            '-setTileBuffers:offsets:withRange:':
                trim_after_first_colon: true
            '-setTileTexture:atIndex:':
                trim_after_first_colon: true
            '-setTileTextures:withRange:':
                trim_after_first_colon: true
            '-setTileSamplerState:atIndex:':
                trim_after_first_colon: true
            '-setTileSamplerStates:withRange:':
                trim_after_first_colon: true
            '-setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:':
                trim_after_first_colon: true
            '-setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:':
                trim_after_first_colon: true
            '-setThreadgroupMemoryLength:offset:atIndex:':
                trim_after_first_colon: true
            '-useResource:usage:':
                trim_after_first_colon: true
            '-useResources:count:usage:':
                trim_after_first_colon: true
            '-useHeaps:count:':
                trim_after_first_colon: true

    MTLRenderPipelineState: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
    MTLResource: # DONE
        methods:
            '-setPurgeableState:':
                trim_after_first_colon: true
    MTLSamplerState: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
    MTLTexture: # DONE
        class: true
        annotations: ['@NativeProtocolProxy']
        visibility: 'public final'
        methods:
            '-getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    pixelBytes:
                        type: '@Pointer long'
            '-replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    pixelBytes:
                        type: '@Pointer long'    
            '-getBytes:bytesPerRow:fromRegion:mipmapLevel:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    pixelBytes:
                        type: '@Pointer long'
            '-replaceRegion:mipmapLevel:withBytes:bytesPerRow:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    pixelBytes:
                        type: '@Pointer long'
            '-newTextureViewWith.*':
                name: newTextureView
                return_marshaler: NSObject.NoRetainMarshaler
    MTLArgumentEncoder: #since 11.0
        methods:
            '-setArgumentBuffer:offset:':
                trim_after_first_colon: true
            '-setArgumentBuffer:startOffset:arrayElement:':
                trim_after_first_colon: true
            '-setBuffer:offset:atIndex:':
                trim_after_first_colon: true
            '-setBuffers:offsets:withRange:':
                trim_after_first_colon: true
            '-setTexture:atIndex:':
                trim_after_first_colon: true
            '-setTextures:withRange:':
                trim_after_first_colon: true
            '-setSamplerState:atIndex:':
                trim_after_first_colon: true
            '-setSamplerStates:withRange:':
                trim_after_first_colon: true
    MTLCaptureScope: {} #since 11.0

functions:
    MTLClearColorMake:
        exclude: true # use constructor instead
    MTLCreate(SystemDefaultDevice):
        class: MTLDevice
        name: 'get#{g[0]}'
        return_marshaler: NSObject.NoRetainMarshaler

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?MTL.*):
        class: Metal
        name: 'Function__#{g[0]}'

values:
    # Error
    MTLCommandBufferErrorDomain:
        class: MTLCommandBufferError
        name: getClassDomain
    MTLLibraryErrorDomain:
        class: MTLLibraryError
        name: getClassDomain
    MTLRenderPipelineErrorDomain:
        class: MTLRenderPipelineError
        name: getClassDomain

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?MTL.*):
        class: Metal
        name: 'Value__#{g[0]}'

constants:
    MTLResourceCPUCacheModeShift:
        exclude: true
    MTLResourceStorageModeShift:
        exclude: true
    MTLResourceHazardTrackingModeShift:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?MTL.*):
        class: Metal
        name: 'Constant__#{g[0]}'
